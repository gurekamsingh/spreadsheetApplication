name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: Debug workspace structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing workspace root:"
        ls -la
        echo "Listing frontend directory:"
        ls -la frontend/
        echo "Listing backend directory:"
        ls -la backend/
        echo "Listing backend/database directory:"
        ls -la backend/database/ || echo "backend/database directory not found"
        echo "Listing root database directory:"
        ls -la database/ || echo "root database directory not found"

    - name: Create virtual environment and install dependencies
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv pip install -e .
        uv pip install -e ".[dev]"
        # Add project root to PYTHONPATH
        export PYTHONPATH=$PWD:$PYTHONPATH
        python -c "import sys, os; print(f'Python path: {sys.path}'); print(f'Current directory: {os.getcwd()}'); print(f'Directory contents: {os.listdir()}'); print(f'Backend directory exists: {os.path.exists(\"backend\")}'); print(f'Backend contents: {os.listdir(\"backend\")}'); print(f'Database directory exists: {os.path.exists(\"backend/database\")}'); print(f'Database contents: {os.listdir(\"backend/database\") if os.path.exists(\"backend/database\") else \"Directory not found\"}')"

    # - name: Run linting
    #   run: |
    #     source .venv/bin/activate
    #     python -m ruff check . --config pyproject.toml
    #     python -m ruff format . --config pyproject.toml

    - name: Run tests with debug output
      run: |
        source .venv/bin/activate
        if [ -d "tests" ]; then
          echo "Test directory contents:"
          ls -la tests/
          echo "Running tests with verbose output and debug logging:"
          PYTHONPATH=$PWD python -m pytest tests/ -v --capture=no
        else
          echo "No tests directory found, skipping tests"
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="$HOME/.cargo/bin:$PATH"

    - name: Create virtual environment and install dependencies
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv pip install -e .
        uv pip install ruff pytest

    - name: Build Docker image
      run: |
        docker build -t spreadsheet-app:${{ github.sha }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker tag spreadsheet-app:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:${{ github.sha }}
        docker tag spreadsheet-app:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Minikube
      uses: manuel-packeisen/setup-minikube@v2.0.0
      with:
        minikube version: 'latest'
        kubernetes version: 'v1.28.0'
        driver: 'docker'
        start args: '--cpus=2 --memory=4g --disk-size=20g'

    - name: Configure kubectl
      run: |
        minikube kubectl -- get nodes
        minikube kubectl -- config view --flatten > kubeconfig.yaml
        export KUBECONFIG=kubeconfig.yaml

    - name: Deploy to Minikube
      run: |
        minikube kubectl -- create namespace spreadsheet-app --dry-run=client -o yaml | minikube kubectl -- apply -f -
        minikube kubectl -- apply -f kubernetes/ -n spreadsheet-app
        minikube kubectl -- set image deployment/spreadsheet-app spreadsheet-app=${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:${{ github.sha }} -n spreadsheet-app
        minikube kubectl -- rollout status deployment/spreadsheet-app -n spreadsheet-app
        minikube service spreadsheet-app -n spreadsheet-app --url 
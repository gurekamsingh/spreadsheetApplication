name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: spreadsheet-app-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install uv
      run: |
        pip install uv

    - name: Create virtual environment with uv
      run: |
        uv venv
        source .venv/bin/activate
        which python
        python --version

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install ruff
        uv pip install -e .
        uv pip install pytest pytest-cov

    - name: Run linting and formatting
      run: |
        source .venv/bin/activate
        which ruff
        ruff check --fix .
        ruff format .

    - name: Check for test files
      id: check_tests
      run: |
        if [ -d "backend/test" ] && [ "$(ls -A backend/test/*.py 2>/dev/null | wc -l)" -gt 0 ]; then
          echo "tests_exist=true" >> $GITHUB_OUTPUT
        else
          echo "tests_exist=false" >> $GITHUB_OUTPUT
        fi

    - name: Run tests
      if: steps.check_tests.outputs.tests_exist == 'true'
      run: |
        source .venv/bin/activate
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        python -m pytest backend/test/ --cov=backend --cov-report=xml

    - name: Skip tests
      if: steps.check_tests.outputs.tests_exist == 'false'
      run: |
        echo "No test files found. Skipping tests."
        touch coverage.xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Verify application startup
      run: |
        source .venv/bin/activate
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        # Start the application in the background
        python run.py &
        APP_PID=$!
        
        # Wait for the application to start
        sleep 5
        
        # Check if the application is running
        if ps -p $APP_PID > /dev/null; then
          echo "Application started successfully"
          # Test basic API endpoint
          curl -f http://localhost:5000/health || exit 1
          # Kill the application
          kill $APP_PID
        else
          echo "Application failed to start"
          exit 1
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install uv
      run: |
        pip install uv

    - name: Create virtual environment with uv
      run: |
        uv venv
        source .venv/bin/activate
        which python
        python --version

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e .

    - name: Build Docker image
      run: |
        docker build -t spreadsheet-app:${{ github.sha }} .

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      run: |
        docker tag spreadsheet-app:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:${{ github.sha }}
        docker tag spreadsheet-app:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install eksctl
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Check if cluster exists
      id: check-cluster
      run: |
        if eksctl get cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          echo "cluster_exists=true" >> $GITHUB_OUTPUT
        else
          echo "cluster_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create cluster if not exists
      if: steps.check-cluster.outputs.cluster_exists == 'false'
      run: eksctl create cluster -f kubernetes/eks-cluster.yaml

    - name: Update kubeconfig and set context
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        kubectl config use-context arn:aws:eks:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:cluster/${{ env.EKS_CLUSTER_NAME }}
        kubectl config current-context

    - name: Deploy to EKS
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace spreadsheet-app --dry-run=client -o yaml | kubectl apply -f -
        
        # Deploy Redis
        kubectl apply -f kubernetes/redis.yaml
        
        # Deploy main application
        kubectl apply -f kubernetes/deployment.yaml
        
        # Deploy ingress
        kubectl apply -f kubernetes/ingress.yaml
        
        # Update deployment with new image
        kubectl set image deployment/spreadsheet-app spreadsheet-app=${{ secrets.DOCKERHUB_USERNAME }}/spreadsheet-app:${{ github.sha }} -n spreadsheet-app
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/spreadsheet-app -n spreadsheet-app
        
        # Get the service URL
        SERVICE_URL=$(kubectl get svc spreadsheet-app-service -n spreadsheet-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Application is available at: http://$SERVICE_URL"
        
        # Verify all pods are running
        kubectl get pods -n spreadsheet-app
        
        # Check application logs
        kubectl logs deployment/spreadsheet-app -n spreadsheet-app 